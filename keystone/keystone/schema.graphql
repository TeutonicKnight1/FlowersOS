# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Flowers {
  id: ID!
  title: String
  description: String
  price: Int
  colors: JSON
  image: String
}

input FlowersWhereUniqueInput {
  id: ID
  description: String
}

input FlowersWhereInput {
  AND: [FlowersWhereInput!]
  OR: [FlowersWhereInput!]
  NOT: [FlowersWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  price: IntFilter
  image: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FlowersOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  price: OrderDirection
  image: OrderDirection
}

input FlowersUpdateInput {
  title: String
  description: String
  price: Int
  colors: JSON
  image: String
}

input FlowersUpdateArgs {
  where: FlowersWhereUniqueInput!
  data: FlowersUpdateInput!
}

input FlowersCreateInput {
  title: String
  description: String
  price: Int
  colors: JSON
  image: String
}

type Orders {
  id: ID!
  name: String
  email: String
  price: Int
  createdAt: DateTime
  orderFlowers(where: OrderFlowerWhereInput! = {}, orderBy: [OrderFlowerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderFlowerWhereUniqueInput): [OrderFlower!]
  orderFlowersCount(where: OrderFlowerWhereInput! = {}): Int
}

input OrdersWhereUniqueInput {
  id: ID
  email: String
}

input OrdersWhereInput {
  AND: [OrdersWhereInput!]
  OR: [OrdersWhereInput!]
  NOT: [OrdersWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  price: IntFilter
  createdAt: DateTimeNullableFilter
  orderFlowers: OrderFlowerManyRelationFilter
}

input OrderFlowerManyRelationFilter {
  every: OrderFlowerWhereInput
  some: OrderFlowerWhereInput
  none: OrderFlowerWhereInput
}

input OrdersOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
}

input OrdersUpdateInput {
  name: String
  email: String
  price: Int
  createdAt: DateTime
  orderFlowers: OrderFlowerRelateToManyForUpdateInput
}

input OrderFlowerRelateToManyForUpdateInput {
  disconnect: [OrderFlowerWhereUniqueInput!]
  set: [OrderFlowerWhereUniqueInput!]
  create: [OrderFlowerCreateInput!]
  connect: [OrderFlowerWhereUniqueInput!]
}

input OrdersUpdateArgs {
  where: OrdersWhereUniqueInput!
  data: OrdersUpdateInput!
}

input OrdersCreateInput {
  name: String
  email: String
  price: Int
  createdAt: DateTime
  orderFlowers: OrderFlowerRelateToManyForCreateInput
}

input OrderFlowerRelateToManyForCreateInput {
  create: [OrderFlowerCreateInput!]
  connect: [OrderFlowerWhereUniqueInput!]
}

type OrderFlower {
  id: ID!
  order: Orders
  flower: Flowers
  quantity: Int
}

input OrderFlowerWhereUniqueInput {
  id: ID
}

input OrderFlowerWhereInput {
  AND: [OrderFlowerWhereInput!]
  OR: [OrderFlowerWhereInput!]
  NOT: [OrderFlowerWhereInput!]
  id: IDFilter
  order: OrdersWhereInput
  flower: FlowersWhereInput
  quantity: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input OrderFlowerOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input OrderFlowerUpdateInput {
  order: OrdersRelateToOneForUpdateInput
  flower: FlowersRelateToOneForUpdateInput
  quantity: Int
}

input OrdersRelateToOneForUpdateInput {
  create: OrdersCreateInput
  connect: OrdersWhereUniqueInput
  disconnect: Boolean
}

input FlowersRelateToOneForUpdateInput {
  create: FlowersCreateInput
  connect: FlowersWhereUniqueInput
  disconnect: Boolean
}

input OrderFlowerUpdateArgs {
  where: OrderFlowerWhereUniqueInput!
  data: OrderFlowerUpdateInput!
}

input OrderFlowerCreateInput {
  order: OrdersRelateToOneForCreateInput
  flower: FlowersRelateToOneForCreateInput
  quantity: Int
}

input OrdersRelateToOneForCreateInput {
  create: OrdersCreateInput
  connect: OrdersWhereUniqueInput
}

input FlowersRelateToOneForCreateInput {
  create: FlowersCreateInput
  connect: FlowersWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFlowers(data: FlowersCreateInput!): Flowers
  createFlowersList(data: [FlowersCreateInput!]!): [Flowers]
  updateFlowers(where: FlowersWhereUniqueInput!, data: FlowersUpdateInput!): Flowers
  updateFlowersList(data: [FlowersUpdateArgs!]!): [Flowers]
  deleteFlowers(where: FlowersWhereUniqueInput!): Flowers
  deleteFlowersList(where: [FlowersWhereUniqueInput!]!): [Flowers]
  createOrders(data: OrdersCreateInput!): Orders
  createOrdersList(data: [OrdersCreateInput!]!): [Orders]
  updateOrders(where: OrdersWhereUniqueInput!, data: OrdersUpdateInput!): Orders
  updateOrdersList(data: [OrdersUpdateArgs!]!): [Orders]
  deleteOrders(where: OrdersWhereUniqueInput!): Orders
  deleteOrdersList(where: [OrdersWhereUniqueInput!]!): [Orders]
  createOrderFlower(data: OrderFlowerCreateInput!): OrderFlower
  createOrderFlowers(data: [OrderFlowerCreateInput!]!): [OrderFlower]
  updateOrderFlower(where: OrderFlowerWhereUniqueInput!, data: OrderFlowerUpdateInput!): OrderFlower
  updateOrderFlowers(data: [OrderFlowerUpdateArgs!]!): [OrderFlower]
  deleteOrderFlower(where: OrderFlowerWhereUniqueInput!): OrderFlower
  deleteOrderFlowers(where: [OrderFlowerWhereUniqueInput!]!): [OrderFlower]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  flowersList(where: FlowersWhereInput! = {}, orderBy: [FlowersOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FlowersWhereUniqueInput): [Flowers!]
  flowers(where: FlowersWhereUniqueInput!): Flowers
  flowersListCount(where: FlowersWhereInput! = {}): Int
  ordersList(where: OrdersWhereInput! = {}, orderBy: [OrdersOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrdersWhereUniqueInput): [Orders!]
  orders(where: OrdersWhereUniqueInput!): Orders
  ordersListCount(where: OrdersWhereInput! = {}): Int
  orderFlowers(where: OrderFlowerWhereInput! = {}, orderBy: [OrderFlowerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderFlowerWhereUniqueInput): [OrderFlower!]
  orderFlower(where: OrderFlowerWhereUniqueInput!): OrderFlower
  orderFlowersCount(where: OrderFlowerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
